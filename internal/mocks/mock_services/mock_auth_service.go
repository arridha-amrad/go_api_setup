// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/auth_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	dto "my-go-api/internal/dto"
	models "my-go-api/internal/models"
	services "my-go-api/internal/services"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthService) CreateUser(ctx context.Context, req dto.CreateUser) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthServiceMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthService)(nil).CreateUser), ctx, req)
}

// DeleteRefreshToken mocks base method.
func (m *MockIAuthService) DeleteRefreshToken(ctx context.Context, userId, deviceId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, userId, deviceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockIAuthServiceMockRecorder) DeleteRefreshToken(ctx, userId, deviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockIAuthService)(nil).DeleteRefreshToken), ctx, userId, deviceId)
}

// GenerateRefreshToken mocks base method.
func (m *MockIAuthService) GenerateRefreshToken() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockIAuthServiceMockRecorder) GenerateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockIAuthService)(nil).GenerateRefreshToken))
}

// GenerateToken mocks base method.
func (m *MockIAuthService) GenerateToken(userId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIAuthServiceMockRecorder) GenerateToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIAuthService)(nil).GenerateToken), userId)
}

// GetUserByIdentity mocks base method.
func (m *MockIAuthService) GetUserByIdentity(ctx context.Context, identity string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIdentity", ctx, identity)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdentity indicates an expected call of GetUserByIdentity.
func (mr *MockIAuthServiceMockRecorder) GetUserByIdentity(ctx, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdentity", reflect.TypeOf((*MockIAuthService)(nil).GetUserByIdentity), ctx, identity)
}

// SendVerificationEmail mocks base method.
func (m *MockIAuthService) SendVerificationEmail(name, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", name, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockIAuthServiceMockRecorder) SendVerificationEmail(name, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockIAuthService)(nil).SendVerificationEmail), name, email, token)
}

// StoreRefreshToken mocks base method.
func (m *MockIAuthService) StoreRefreshToken(ctx context.Context, userId, deviceId uuid.UUID, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", ctx, userId, deviceId, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockIAuthServiceMockRecorder) StoreRefreshToken(ctx, userId, deviceId, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockIAuthService)(nil).StoreRefreshToken), ctx, userId, deviceId, hash)
}

// ValidateToken mocks base method.
func (m *MockIAuthService) ValidateToken(tokenString string) (*services.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*services.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockIAuthServiceMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockIAuthService)(nil).ValidateToken), tokenString)
}

// VerifyPassword mocks base method.
func (m *MockIAuthService) VerifyPassword(hashedPassword, plainPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", hashedPassword, plainPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockIAuthServiceMockRecorder) VerifyPassword(hashedPassword, plainPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockIAuthService)(nil).VerifyPassword), hashedPassword, plainPassword)
}

// VerifyRefreshToken mocks base method.
func (m *MockIAuthService) VerifyRefreshToken(ctx context.Context, userId, deviceId uuid.UUID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", ctx, userId, deviceId, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockIAuthServiceMockRecorder) VerifyRefreshToken(ctx, userId, deviceId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockIAuthService)(nil).VerifyRefreshToken), ctx, userId, deviceId, token)
}
